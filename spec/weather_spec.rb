require 'spec_helper'
require_relative '../lib/generator/random_city_generator'

describe Weather do
  context 'requesting weather information on a single city works correctly by testing get_weather' do

    before do
        #create an instance of the city
        # @city_weather = Weather.new.random_city_generator
        # @city_id = @city_weather.generate_random_city
        #
        # @results = Weather.new.list_of_cities

        # 1 step. Setup fixture
        weather = Weather.new
        list_of_cities = weather.list_of_cities

        # 2 step. Call SUT
        @city_weather = list_of_cities.get_weather


      end

    # it "should return all the weather information in a hash" do
    #   expect(@results.get_city_weather(@city_id)).to be_a(Hash)
    #   p   @city_id = @city_weather.generate_random_city
    # end

    it "should return a string of two letters containing an abbreviation of the given country" do
      country = @city_weather["sys"]["country"]
      expect(country.length).to eq(2)
    end

    it "should return weather information" do

      # 3 step. Check expectations
      expect(@city_weather).to_not be_nil
    end

    it "should return all the weather information in a hash" do
      expect(@city_weather).to be_a(Hash)
    end

    it "should return an integer between 0 and 100 for humidity" do
      humidity = @city_weather["main"]["humidity"]
      expect(humidity).to be_between(1, 100)
    end
end #end of first context


context "Testing the method get_city_weather" do
    it "should return a city ID identical to the random ID generated by the generator" do
      weather = Weather.new

      list_of_cities = weather.list_of_cities
      city_generator = weather.random_city_generator
      city_id = city_generator.generate_random_city
      # 2
      weather_info =  list_of_cities.get_city_weather(city_id)
      expect(weather_info["id"]).to eq(city_id)
      expect(weather_info["id"]).to be_a(Integer)
    end

    







  end #end of second context

end #end of descirbe
